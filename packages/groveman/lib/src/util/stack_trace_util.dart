import 'dart:core';

import 'package:meta/meta.dart';

@immutable
class StackTraceUtil {
  /// Matches a stacktrace line as generated on Android/iOS devices.
  final _deviceStackTraceRegex = RegExp(r'#[0-9]+[\s]+(.+) \(([^\s]+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  final _webStackTraceRegex = RegExp(r'^((packages|dart-sdk)\/[^\s]+\/)');

  /// Matches a stacktrace line as generated by browser Dart.
  final _browserStackTraceRegex = RegExp(r'^(?=package:)?(dart:[^\s]+|[^\s]+)');

  /// Matches a stacktrace line as generated by browser Dart file.
  final _dartFileRegex = RegExp('[A-Za-z_]+.dart');

  String? getTag() {
    final stackTraceList = StackTrace.current.toString().split('\n');
    discardUnnecessaryTrace(stackTraceList);

    final line = stackTraceList.first;

    return getInfo(line);
  }

  void discardUnnecessaryTrace(List<String> stackTraceList) {
    stackTraceList.removeWhere((line) {
      return _discardDeviceStacktraceLine(line) ||
          _discardWebStacktraceLine(line) ||
          _discardBrowserStacktraceLine(line) ||
          line.trim().isEmpty;
    });
  }

  @visibleForTesting
  String? getInfo(String trace) {
    final indexOfFileName = trace.indexOf(_dartFileRegex);
    final fileInfo =
        indexOfFileName > -1 ? trace.substring(indexOfFileName) : null;
    final listOfInfos = fileInfo?.split(':') ?? List.empty();

    if (listOfInfos.isNotEmpty) {
      final firstInfo = listOfInfos.first;
      final fileName = firstInfo
          .replaceAll(RegExp('[0-9]'), '')
          .replaceAll('.dart', '')
          .trim();
      if (listOfInfos.length >= 2) {
        var lineNumber = firstInfo.replaceAll(_dartFileRegex, '').trim();
        if (lineNumber.isEmpty) {
          lineNumber = listOfInfos[1].replaceAll(RegExp('[^0-9]'), '');
        }
        return '$fileName-$lineNumber';
      }
      return fileName;
    }

    return null;
  }

  bool _discardDeviceStacktraceLine(String line) {
    final match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }

    return match.group(2)!.startsWith('package:groveman/');
  }

  bool _discardWebStacktraceLine(String line) {
    final match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }

    return match.group(1)!.startsWith('packages/groveman/') ||
        match.group(1)!.startsWith('dart-sdk/lib');
  }

  bool _discardBrowserStacktraceLine(String line) {
    final match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }

    return match.group(1)!.startsWith('package:groveman/') ||
        match.group(1)!.startsWith('dart:');
  }
}
